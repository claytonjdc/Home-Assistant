hyperion:
  automation:
  - alias: Hyperion Sync
    trigger:
    - platform: state
      entity_id: binary_sensor.living_room_hdmi
    - platform: state
      entity_id: input_select.hyperion_effect
    - platform: state
      entity_id: sensor.day_phase
    - platform: state
      entity_id: light.living_room
    - platform: state
      entity_id: switch.TV_Power
      to: 'on'
      for:
        hours: 0
        minutes: 0
        seconds: 45
    action:
    - service_template: >
          {% if states.binary_sensor.living_room_hdmi.state == 'on' %}
            shell_command.hyperion_ambilight
          {% elif states.light.living_room.state == 'on'
            and states.sensor.day_phase.state in ['Evening', 'Night'] %}
            shell_command.hyperion_standby
          {% else %}
            shell_command.hyperion_off
          {% endif %}
    - service: notify.ios_bones
      data_template:
        message: >
            {% if states.binary_sensor.living_room_hdmi.state == 'on' %}
              shell_command.hyperion_ambilight
            {% elif states.light.living_room.state == 'on'
              and states.sensor.day_phase.state in ['Evening', 'Night'] %}
              shell_command.hyperion_standby
            {% else %}
              shell_command.hyperion_off
            {% endif %}


  switch:
  - platform: command_line
    switches:
      hyperion:
        friendly_name: Ambilight
        command_on: '/config/bash_scripts/hyperion/on.sh'
        command_off: '/config/bash_scripts/hyperion/off.sh'
        command_state: '/config/bash_scripts/hyperion/status.sh'

  shell_command:
    hyperion_off: '/config/bash_scripts/hyperion/off.sh'
    hyperion_ambilight: '/config/bash_scripts/hyperion/on.sh'
    hyperion_standby: '/config/bash_scripts/hyperion/effects.sh "Full color mood blobs"'
    hyperion_effect: '/config/bash_scripts/hyperion/effects.sh "{{ states.input_select.hyperion_effect.state }}"'
